
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.5.7)

2025-10-30 20:56:54 - o.h.v.i.x.config.ValidationXmlParser - Trying to load META-INF/validation.xml for XML based Validator configuration.
2025-10-30 20:56:54 - o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via TCCL
2025-10-30 20:56:54 - o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2025-10-30 20:56:54 - o.h.v.i.x.config.ValidationXmlParser - No META-INF/validation.xml found. Using annotation based configuration only.
2025-10-30 20:56:54 - o.h.v.i.e.r.TraversableResolvers - Found jakarta.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2025-10-30 20:56:54 - o.h.v.i.e.r.TraversableResolvers - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2025-10-30 20:56:54 - o.h.v.m.ResourceBundleMessageInterpolator - Loaded expression factory via original TCCL
2025-10-30 20:56:54 - c.r.banking.BankingSystemApplication - Starting BankingSystemApplication using Java 17.0.16 with PID 20680 (C:\Users\Ankit\SwetaForRabo\banking-system\target\classes started by Ankit in C:\Users\Ankit\SwetaForRabo\banking-system)
2025-10-30 20:56:54 - c.r.banking.BankingSystemApplication - Running with Spring Boot v3.5.7, Spring v6.2.12
2025-10-30 20:56:54 - c.r.banking.BankingSystemApplication - The following 1 profile is active: "dev"
2025-10-30 20:56:54 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000252: Using org.hibernate.validator.internal.engine.DefaultPropertyNodeNameProvider as property node name provider.
2025-10-30 20:56:54 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator as ValidatorFactory-scoped message interpolator.
2025-10-30 20:56:54 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.resolver.JPATraversableResolver as ValidatorFactory-scoped traversable resolver.
2025-10-30 20:56:54 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.
2025-10-30 20:56:54 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.
2025-10-30 20:56:54 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.
2025-10-30 20:56:56 - o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-30 20:56:56 - o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 100 ms. Found 4 JPA repository interfaces.
2025-10-30 20:56:57 - o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-30 20:56:57 - o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-30 20:56:57 - o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.48]
2025-10-30 20:56:57 - o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-30 20:56:57 - o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3109 ms
2025-10-30 20:56:57 - o.s.web.filter.CorsFilter - Filter 'corsFilter' configured for use
2025-10-30 20:56:58 - com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-30 20:56:58 - com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@54489296
2025-10-30 20:56:58 - com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-30 20:56:58 - org.flywaydb.core.FlywayExecutor - Database: jdbc:postgresql://localhost:5432/rabobank_banking (PostgreSQL 15.14)
2025-10-30 20:56:58 - o.f.core.internal.command.DbValidate - Successfully validated 6 migrations (execution time 00:00.080s)
2025-10-30 20:56:58 - o.f.core.internal.command.DbMigrate - Current version of schema "public": 5
2025-10-30 20:56:58 - o.f.core.internal.command.DbMigrate - Schema "public" is up to date. No migration necessary.
2025-10-30 20:56:58 - o.h.jpa.internal.util.LogHelper - PersistenceUnitInfo [
	name: default
	persistence provider classname: null
	classloader: jdk.internal.loader.ClassLoaders$AppClassLoader@4e0e2f2a
	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: HikariDataSource (HikariPool-1)
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/Ankit/SwetaForRabo/banking-system/target/classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		com.rabobank.banking.domain.model.Account
		com.rabobank.banking.domain.model.Card
		com.rabobank.banking.domain.model.Transaction
		com.rabobank.banking.domain.model.User]
	Mapping files names []
	Properties []
2025-10-30 20:56:58 - o.h.i.internal.IntegratorServiceImpl - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2025-10-30 20:56:58 - o.h.i.internal.IntegratorServiceImpl - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2025-10-30 20:56:58 - org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.33.Final
2025-10-30 20:56:58 - org.hibernate.cfg.Environment - HHH000206: 'hibernate.properties' not found
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2025-10-30 20:56:58 - org.hibernate.orm.idgen.factory - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2025-10-30 20:56:58 - o.h.c.i.RegionFactoryInitiator - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2025-10-30 20:56:58 - o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7f2c995b
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7f2c995b
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@7f2c995b
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@101c15ad
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@101c15ad
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6068ebb2
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6068ebb2
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@5a466dd
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@5a466dd
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1ed9d173
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1ed9d173
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@1ed9d173
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@6e981e78
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6e981e78
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@6e981e78
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@498a4d62
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@498a4d62
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@6fbe4800
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@3f3c5ecd
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@3f3c5ecd
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1179fc8c
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@a03529c
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@1760e594
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@1760e594
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@1760e594
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@4af70b83
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@4af70b83
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@4af70b83
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@143413cd
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@143413cd
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@143413cd
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@4b32465
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@4b32465
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@4b32465
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@146f3d22
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@146f3d22
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@146f3d22
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@66b6873f
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@66b6873f
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@52285a5f
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@52285a5f
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@4fa5cc73
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@4fa5cc73
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4fa5cc73
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@224e6e88
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@70139a81
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@70139a81
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@60f9dc7e
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@15e5246
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@15e5246
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@15e5246
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@503556cb
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@3c9e19de
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@12aa381f
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@6115846e
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6115846e
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@1bec1589
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@1bec1589
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@57f0bfc3
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@14590fe2
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@5922cff3
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2299d903
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@70c56434
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@2c3f43d1
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@632d4cf2
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@632d4cf2
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@f10d055
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@f10d055
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@542ff147
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@542ff147
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2d801d8
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2d801d8
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@b9b97ad
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@b9b97ad
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2807cf3
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@298e002d
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@6b9a1205
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@6b9a1205
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@3c6bd624
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3d8d52be
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@645ba24a
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5f6a8efe
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5f6a8efe
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3dd2b9c1
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6a1d1467
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@536da29c
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@536da29c
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@58fbcb71
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@58fbcb71
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@70cf7d1e
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@70cf7d1e
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@70cf7d1e
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@72f3f14c
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@72f3f14c
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@72f3f14c
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4cb4c4cc
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@4a122e68
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@41be8db9
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@41be8db9
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@2c2a7d53
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@2c2a7d53
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@2c2a7d53
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@46524ebe
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@1de85972
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@280ecc33
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@280ecc33
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@57b1ec84
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@57b1ec84
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@57b1ec84
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@3c27f72
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@3c27f72
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@5cbe95b1
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@5cbe95b1
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@28fa541
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@28fa541
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@5a82bc58
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@5a82bc58
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@4aab7195
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4aab7195
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration vector -> org.hibernate.type.BasicTypeReference@6210666c
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration float_vector -> org.hibernate.type.BasicTypeReference@1dca62c2
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration double_vector -> org.hibernate.type.BasicTypeReference@52657d5f
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration byte_vector -> org.hibernate.type.BasicTypeReference@43d3995f
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@2211b44f
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@254e9709
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@254e9709
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@44492c06
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@5c4714ef
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@c94bd18
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@71fb8301
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@7cdfa824
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@18db3b3c
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@318e3942
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@1c4057f9
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@1ddf42dd
2025-10-30 20:56:59 - o.h.b.internal.BootstrapContextImpl - Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@1d3a03fe] into BootstrapContext; was [null]
2025-10-30 20:56:59 - o.h.b.internal.ClassLoaderAccessImpl - ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@1d3a03fe) [was null]
2025-10-30 20:56:59 - o.h.b.internal.BootstrapContextImpl - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@47f0f414] into BootstrapContext; was [null]
2025-10-30 20:56:59 - o.h.b.internal.BootstrapContextImpl - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@7e1d8d41] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@4809c771]
2025-10-30 20:56:59 - o.h.j.b.i.PersistenceUnitInfoDescriptor - Pushing class transformers for PU named 'default' on loading classloader jdk.internal.loader.ClassLoaders$AppClassLoader@4e0e2f2a
2025-10-30 20:56:59 - o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-30 20:56:59 - o.h.b.internal.BootstrapContextImpl - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@1d3a03fe]
2025-10-30 20:56:59 - o.h.b.internal.ClassLoaderAccessImpl - ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@1d3a03fe]
2025-10-30 20:56:59 - o.h.e.j.e.i.JdbcEnvironmentInitiator - Database ->
	   name : PostgreSQL
	version : 15.14
	  major : 15
	  minor : 14
2025-10-30 20:56:59 - o.h.e.j.e.i.JdbcEnvironmentInitiator - Driver ->
	   name : PostgreSQL JDBC Driver
	version : 42.7.8
	  major : 42
	  minor : 7
2025-10-30 20:56:59 - o.h.e.j.e.i.JdbcEnvironmentInitiator - JDBC version : 4.2
2025-10-30 20:56:59 - org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-30 20:56:59 - org.hibernate.orm.dialect - HHH035001: Using dialect: org.hibernate.dialect.PostgreSQLDialect, version: 15.14
2025-10-30 20:56:59 - o.h.e.j.e.s.IdentifierHelperBuilder - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2025-10-30 20:56:59 - org.hibernate.orm.jdbc.lob - HHH10010004: Disabling contextual LOB creation as Dialect reported it is not supported
2025-10-30 20:56:59 - o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 15.14
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-30 20:56:59 - o.h.t.d.sql.spi.DdlTypeRegistry - addDescriptor(2003, org.hibernate.type.descriptor.sql.internal.ArrayDdlTypeImpl@13d10057) replaced previous registration(org.hibernate.type.descriptor.sql.internal.ArrayDdlTypeImpl@66944c7c)
2025-10-30 20:56:59 - o.h.t.d.sql.spi.DdlTypeRegistry - addDescriptor(6, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@14993306) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@73ae82da)
2025-10-30 20:56:59 - o.h.t.d.jdbc.spi.JdbcTypeRegistry - addDescriptor(2004, BlobTypeDescriptor(BLOB_BINDING)) replaced previous registration(BlobTypeDescriptor(DEFAULT))
2025-10-30 20:56:59 - o.h.t.d.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(CLOB_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration JAVA_OBJECT -> org.hibernate.type.JavaObjectType@53e82089
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@53e82089
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Type registration key [java.lang.Object] overrode previous entry : `org.hibernate.type.JavaObjectType@254e9709`
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.DurationType -> basicType@1(java.time.Duration,3015)
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,3015)
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,3015)
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-10-30 20:56:59 - o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-10-30 20:56:59 - o.h.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@72ec16f8] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@279e1422]
2025-10-30 20:56:59 - o.h.boot.model.relational.Namespace - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2025-10-30 20:56:59 - o.h.boot.model.internal.EntityBinder - Binding entity from annotated class: com.rabobank.banking.domain.model.Account
2025-10-30 20:56:59 - o.h.boot.model.internal.EntityBinder - Import with entity name Account
2025-10-30 20:56:59 - o.h.boot.model.internal.EntityBinder - Bind entity com.rabobank.banking.domain.model.Account on table accounts
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.Account] is safe
2025-10-30 20:56:59 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.Account
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property accountId with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Account:accountId]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for accountId
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: accounts.account_id
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property accountId
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property accountNumber with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Account:accountNumber]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for accountNumber
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: accounts.account_number
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property accountNumber
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property active with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Account:active]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for active
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: accounts.active
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property active
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property balance with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Account:balance]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for balance
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: accounts.balance
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property balance
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedJoinColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property createdAt with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Account:createdAt]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for createdAt
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: accounts.created_at
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property createdAt
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property updatedAt with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Account:updatedAt]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for updatedAt
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: accounts.updated_at
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property updatedAt
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedJoinColumn(column='user_id')
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property user
2025-10-30 20:56:59 - o.h.b.r.c.i.ClassLoaderServiceImpl - HHH000194: Package not found or no package-info.java: com.rabobank.banking.domain.model
2025-10-30 20:56:59 - o.h.j.e.i.CallbackDefinitionResolverLegacyImpl - Adding onUpdate as PreUpdate callback for entity com.rabobank.banking.domain.model.Account
2025-10-30 20:56:59 - o.h.j.e.i.CallbackDefinitionResolverLegacyImpl - Adding onCreate as PrePersist callback for entity com.rabobank.banking.domain.model.Account
2025-10-30 20:56:59 - o.h.boot.model.internal.EntityBinder - Binding entity from annotated class: com.rabobank.banking.domain.model.Card
2025-10-30 20:56:59 - o.h.boot.model.internal.EntityBinder - Import with entity name Card
2025-10-30 20:56:59 - o.h.boot.model.internal.EntityBinder - Bind entity com.rabobank.banking.domain.model.Card on table cards
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.Card] is safe
2025-10-30 20:56:59 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.Card
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property id with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Card:id]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for id
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: cards.id
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property id
2025-10-30 20:56:59 - o.h.boot.model.internal.BinderHelper - #makeIdGenerator(BasicValue([Column(id)]), id, identity, , ...)
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedJoinColumn(column='account_id')
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property account
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property active with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Card:active]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for active
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: cards.active
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property active
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property cardHolderName with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Card:cardHolderName]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for cardHolderName
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: cards.card_holder_name
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property cardHolderName
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property cardNumber with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Card:cardNumber]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for cardNumber
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: cards.card_number
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property cardNumber
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property cardType with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Card:cardType]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for cardType
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: cards.card_type
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property cardType
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property createdAt with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Card:createdAt]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for createdAt
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: cards.created_at
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property createdAt
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property expiryDate with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Card:expiryDate]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for expiryDate
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: cards.expiry_date
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property expiryDate
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property updatedAt with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Card:updatedAt]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for updatedAt
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: cards.updated_at
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property updatedAt
2025-10-30 20:56:59 - o.h.b.r.c.i.ClassLoaderServiceImpl - HHH000194: Package not found or no package-info.java: com.rabobank.banking.domain.model
2025-10-30 20:56:59 - o.h.j.e.i.CallbackDefinitionResolverLegacyImpl - Adding onUpdate as PreUpdate callback for entity com.rabobank.banking.domain.model.Card
2025-10-30 20:56:59 - o.h.j.e.i.CallbackDefinitionResolverLegacyImpl - Adding onCreate as PrePersist callback for entity com.rabobank.banking.domain.model.Card
2025-10-30 20:56:59 - o.h.boot.model.internal.EntityBinder - Binding entity from annotated class: com.rabobank.banking.domain.model.Transaction
2025-10-30 20:56:59 - o.h.boot.model.internal.EntityBinder - Import with entity name Transaction
2025-10-30 20:56:59 - o.h.boot.model.internal.EntityBinder - Bind entity com.rabobank.banking.domain.model.Transaction on table transactions
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.Transaction] is safe
2025-10-30 20:56:59 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.Transaction
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property transactionId with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:transactionId]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for transactionId
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.transaction_id
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property transactionId
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property accountId with lazy=false
2025-10-30 20:56:59 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:accountId]
2025-10-30 20:56:59 - o.h.b.m.internal.BasicValueBinder - building BasicValue for accountId
2025-10-30 20:56:59 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.account_id
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - Building property accountId
2025-10-30 20:56:59 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:56:59 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property amount with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:amount]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for amount
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.amount
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property amount
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property balanceAfter with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:balanceAfter]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for balanceAfter
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.balance_after
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property balanceAfter
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property balanceBefore with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:balanceBefore]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for balanceBefore
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.balance_before
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property balanceBefore
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property cardType with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:cardType]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for cardType
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.card_type
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property cardType
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property description with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:description]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for description
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.description
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property description
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property fee with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:fee]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for fee
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.fee
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property fee
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property status with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:status]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for status
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.status
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property status
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property toAccountId with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:toAccountId]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for toAccountId
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.to_account_id
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property toAccountId
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property totalAmount with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:totalAmount]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for totalAmount
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.total_amount
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property totalAmount
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property transactionDate with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:transactionDate]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for transactionDate
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.transaction_date
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property transactionDate
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property type with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.Transaction:type]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for type
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: transactions.type
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property type
2025-10-30 20:57:00 - o.h.b.r.c.i.ClassLoaderServiceImpl - HHH000194: Package not found or no package-info.java: com.rabobank.banking.domain.model
2025-10-30 20:57:00 - o.h.j.e.i.CallbackDefinitionResolverLegacyImpl - Adding onCreate as PrePersist callback for entity com.rabobank.banking.domain.model.Transaction
2025-10-30 20:57:00 - o.h.boot.model.internal.EntityBinder - Binding entity from annotated class: com.rabobank.banking.domain.model.User
2025-10-30 20:57:00 - o.h.boot.model.internal.EntityBinder - Import with entity name User
2025-10-30 20:57:00 - o.h.boot.model.internal.EntityBinder - Bind entity com.rabobank.banking.domain.model.User on table users
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.User] is safe
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.User
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property id with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.User:id]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for id
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: users.id
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property id
2025-10-30 20:57:00 - o.h.boot.model.internal.BinderHelper - #makeIdGenerator(BasicValue([Column(id)]), id, identity, , ...)
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property createdAt with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.User:createdAt]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for createdAt
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: users.created_at
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property createdAt
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property email with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.User:email]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for email
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: users.email
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property email
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property firstName with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.User:firstName]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for firstName
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: users.first_name
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property firstName
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property lastName with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.User:lastName]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for lastName
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: users.last_name
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property lastName
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property phoneNumber with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.User:phoneNumber]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for phoneNumber
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: users.phone_number
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property phoneNumber
2025-10-30 20:57:00 - o.h.b.model.internal.AnnotatedColumn - Binding column: AnnotatedColumn()
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - MetadataSourceProcessor property updatedAt with lazy=false
2025-10-30 20:57:00 - o.h.b.m.i.AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.rabobank.banking.domain.model.User:updatedAt]
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - building BasicValue for updatedAt
2025-10-30 20:57:00 - org.hibernate.mapping.BasicValue - Skipping column re-registration: users.updated_at
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property updatedAt
2025-10-30 20:57:00 - o.h.b.r.c.i.ClassLoaderServiceImpl - HHH000194: Package not found or no package-info.java: com.rabobank.banking.domain.model
2025-10-30 20:57:00 - o.h.j.e.i.CallbackDefinitionResolverLegacyImpl - Adding onUpdate as PreUpdate callback for entity com.rabobank.banking.domain.model.User
2025-10-30 20:57:00 - o.h.j.e.i.CallbackDefinitionResolverLegacyImpl - Adding onCreate as PrePersist callback for entity com.rabobank.banking.domain.model.User
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for accountId
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for accountNumber
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for active
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for balance
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for updatedAt
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for id
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for active
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for cardHolderName
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for cardNumber
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for cardType
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for expiryDate
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for updatedAt
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for transactionId
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for accountId
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for amount
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for balanceAfter
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for balanceBefore
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for cardType
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for description
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for fee
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for status
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for toAccountId
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for totalAmount
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for transactionDate
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for type
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for id
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for email
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for firstName
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for lastName
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for phoneNumber
2025-10-30 20:57:00 - o.h.b.m.internal.BasicValueBinder - Starting `BasicValueBinder#fillSimpleValue` for updatedAt
2025-10-30 20:57:00 - org.hibernate.mapping.PrimaryKey - Forcing column [account_id] to be non-null as it is part of the primary key for table [accounts]
2025-10-30 20:57:00 - org.hibernate.mapping.PrimaryKey - Forcing column [id] to be non-null as it is part of the primary key for table [cards]
2025-10-30 20:57:00 - org.hibernate.mapping.PrimaryKey - Forcing column [transaction_id] to be non-null as it is part of the primary key for table [transactions]
2025-10-30 20:57:00 - org.hibernate.mapping.PrimaryKey - Forcing column [id] to be non-null as it is part of the primary key for table [users]
2025-10-30 20:57:00 - o.h.b.model.internal.PropertyBinder - Building property card
2025-10-30 20:57:00 - o.h.b.i.InFlightMetadataCollectorImpl - Processing association property references
2025-10-30 20:57:00 - o.h.b.i.InFlightMetadataCollectorImpl - Processing association property references
2025-10-30 20:57:00 - o.h.internal.SessionFactoryImpl - Building session factory
2025-10-30 20:57:00 - o.h.s.i.SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2025-10-30 20:57:00 - o.h.internal.SessionFactoryImpl - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.cpu.isalist=amd64, hibernate.resource.beans.container=org.springframework.orm.hibernate5.SpringBeanContainer@2e057637, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect, hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy, java.class.path=C:\Users\Ankit\SwetaForRabo\banking-system\target\classes;C:\Users\Ankit\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.5.7\spring-boot-starter-data-jpa-3.5.7.jar;C:\Users\Ankit\.m2\repository\org\springframework\boot\spring-boot-starter\3.5.7\spring-boot-starter-3.5.7.jar;C:\Users\Ankit\.m2\repository\org\springframework\boot\spring-boot\3.5.7\spring-boot-3.5.7.jar;C:\Users\Ankit\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.5.7\spring-boot-autoconfigure-3.5.7.jar;C:\Users\Ankit\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.5.7\spring-boot-starter-logging-3.5.7.jar;C:\Users\Ankit\.m2\repository\ch\qos\logback\logback-classic\1.5.20\logback-classic-1.5.20.jar;C:\Users\Ankit\.m2\repository\ch\qos\logback\logback-core\1.5.20\logback-core-1.5.20.jar;C:\Users\Ankit\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\Ankit\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\Ankit\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\Ankit\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Ankit\.m2\repository\org\yaml\snakeyaml\2.4\snakeyaml-2.4.jar;C:\Users\Ankit\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.5.7\spring-boot-starter-jdbc-3.5.7.jar;C:\Users\Ankit\.m2\repository\com\zaxxer\HikariCP\6.3.3\HikariCP-6.3.3.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-jdbc\6.2.12\spring-jdbc-6.2.12.jar;C:\Users\Ankit\.m2\repository\org\hibernate\orm\hibernate-core\6.6.33.Final\hibernate-core-6.6.33.Final.jar;C:\Users\Ankit\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Ankit\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Ankit\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\Ankit\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\Ankit\.m2\repository\net\bytebuddy\byte-buddy\1.17.8\byte-buddy-1.17.8.jar;C:\Users\Ankit\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.6\jaxb-runtime-4.0.6.jar;C:\Users\Ankit\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.6\jaxb-core-4.0.6.jar;C:\Users\Ankit\.m2\repository\org\eclipse\angus\angus-activation\2.0.3\angus-activation-2.0.3.jar;C:\Users\Ankit\.m2\repository\org\glassfish\jaxb\txw2\4.0.6\txw2-4.0.6.jar;C:\Users\Ankit\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\Ankit\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Ankit\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\Ankit\.m2\repository\org\springframework\data\spring-data-jpa\3.5.5\spring-data-jpa-3.5.5.jar;C:\Users\Ankit\.m2\repository\org\springframework\data\spring-data-commons\3.5.5\spring-data-commons-3.5.5.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-orm\6.2.12\spring-orm-6.2.12.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-context\6.2.12\spring-context-6.2.12.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-aop\6.2.12\spring-aop-6.2.12.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-tx\6.2.12\spring-tx-6.2.12.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-beans\6.2.12\spring-beans-6.2.12.jar;C:\Users\Ankit\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-aspects\6.2.12\spring-aspects-6.2.12.jar;C:\Users\Ankit\.m2\repository\org\aspectj\aspectjweaver\1.9.24\aspectjweaver-1.9.24.jar;C:\Users\Ankit\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.5.7\spring-boot-starter-web-3.5.7.jar;C:\Users\Ankit\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.5.7\spring-boot-starter-json-3.5.7.jar;C:\Users\Ankit\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.19.2\jackson-databind-2.19.2.jar;C:\Users\Ankit\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.19.2\jackson-annotations-2.19.2.jar;C:\Users\Ankit\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.19.2\jackson-datatype-jdk8-2.19.2.jar;C:\Users\Ankit\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.19.2\jackson-datatype-jsr310-2.19.2.jar;C:\Users\Ankit\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.19.2\jackson-module-parameter-names-2.19.2.jar;C:\Users\Ankit\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.5.7\spring-boot-starter-tomcat-3.5.7.jar;C:\Users\Ankit\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.48\tomcat-embed-core-10.1.48.jar;C:\Users\Ankit\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.48\tomcat-embed-el-10.1.48.jar;C:\Users\Ankit\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.48\tomcat-embed-websocket-10.1.48.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-web\6.2.12\spring-web-6.2.12.jar;C:\Users\Ankit\.m2\repository\io\micrometer\micrometer-observation\1.15.5\micrometer-observation-1.15.5.jar;C:\Users\Ankit\.m2\repository\io\micrometer\micrometer-commons\1.15.5\micrometer-commons-1.15.5.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-webmvc\6.2.12\spring-webmvc-6.2.12.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-expression\6.2.12\spring-expression-6.2.12.jar;C:\Users\Ankit\.m2\repository\org\postgresql\postgresql\42.7.8\postgresql-42.7.8.jar;C:\Users\Ankit\.m2\repository\org\checkerframework\checker-qual\3.49.5\checker-qual-3.49.5.jar;C:\Users\Ankit\.m2\repository\org\projectlombok\lombok\1.18.34\lombok-1.18.34.jar;C:\Users\Ankit\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.4\jakarta.xml.bind-api-4.0.4.jar;C:\Users\Ankit\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.4\jakarta.activation-api-2.1.4.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-core\6.2.12\spring-core-6.2.12.jar;C:\Users\Ankit\.m2\repository\org\springframework\spring-jcl\6.2.12\spring-jcl-6.2.12.jar;C:\Users\Ankit\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.3.Final\hibernate-validator-8.0.3.Final.jar;C:\Users\Ankit\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\Ankit\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\Ankit\.m2\repository\com\fasterxml\classmate\1.7.1\classmate-1.7.1.jar;C:\Users\Ankit\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-ui\2.7.0\springdoc-openapi-starter-webmvc-ui-2.7.0.jar;C:\Users\Ankit\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-api\2.7.0\springdoc-openapi-starter-webmvc-api-2.7.0.jar;C:\Users\Ankit\.m2\repository\org\springdoc\springdoc-openapi-starter-common\2.7.0\springdoc-openapi-starter-common-2.7.0.jar;C:\Users\Ankit\.m2\repository\io\swagger\core\v3\swagger-core-jakarta\2.2.25\swagger-core-jakarta-2.2.25.jar;C:\Users\Ankit\.m2\repository\org\apache\commons\commons-lang3\3.17.0\commons-lang3-3.17.0.jar;C:\Users\Ankit\.m2\repository\io\swagger\core\v3\swagger-annotations-jakarta\2.2.25\swagger-annotations-jakarta-2.2.25.jar;C:\Users\Ankit\.m2\repository\io\swagger\core\v3\swagger-models-jakarta\2.2.25\swagger-models-jakarta-2.2.25.jar;C:\Users\Ankit\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.19.2\jackson-dataformat-yaml-2.19.2.jar;C:\Users\Ankit\.m2\repository\org\webjars\swagger-ui\5.18.2\swagger-ui-5.18.2.jar;C:\Users\Ankit\.m2\repository\org\webjars\webjars-locator-lite\1.1.2\webjars-locator-lite-1.1.2.jar;C:\Users\Ankit\.m2\repository\org\jspecify\jspecify\1.0.0\jspecify-1.0.0.jar;C:\Users\Ankit\.m2\repository\org\flywaydb\flyway-core\10.10.0\flyway-core-10.10.0.jar;C:\Users\Ankit\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-toml\2.19.2\jackson-dataformat-toml-2.19.2.jar;C:\Users\Ankit\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.19.2\jackson-core-2.19.2.jar;C:\Users\Ankit\.m2\repository\com\google\code\gson\gson\2.13.2\gson-2.13.2.jar;C:\Users\Ankit\.m2\repository\com\google\errorprone\error_prone_annotations\2.41.0\error_prone_annotations-2.41.0.jar;C:\Users\Ankit\.m2\repository\org\flywaydb\flyway-database-postgresql\10.10.0\flyway-database-postgresql-10.10.0.jar, java.vm.vendor=Eclipse Adoptium, sun.arch.data.model=64, hibernate.order_inserts=true, user.variant=, java.vendor.url=https://adoptium.net/, catalina.useNaming=false, user.timezone=Europe/Berlin, jakarta.persistence.sharedCache.mode=UNSPECIFIED, org.jboss.logging.provider=slf4j, java.vm.specification.version=17, os.name=Windows 11, hibernate.order_updates=true, APPLICATION_NAME=banking-system, jakarta.persistence.nonJtaDataSource=HikariDataSource (HikariPool-1), hibernate.jdbc.batch_size=20, sun.java.launcher=SUN_STANDARD, user.country=IN, sun.boot.library.path=C:\Program Files\Eclipse Adoptium\jdk-17.0.16.8-hotspot\bin, sun.java.command=com.rabobank.banking.BankingSystemApplication --spring.profiles.active=dev, javax.persistence.nonJtaDataSource=HikariDataSource (HikariPool-1), hibernate.use_sql_comments=true, hibernate.transaction.jta.platform=org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform@762f8ff6, jdk.debug=release, sun.cpu.endian=little, hibernate.cdi.extensions=true, user.home=C:\Users\Ankit, user.language=en, java.specification.vendor=Oracle Corporation, java.version.date=2025-07-15, java.home=C:\Program Files\Eclipse Adoptium\jdk-17.0.16.8-hotspot, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, hibernate.persistenceUnitName=default, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, FILE_LOG_CHARSET=UTF-8, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.headless=true, jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=validate, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.16+8, user.name=Ankit, stdout.encoding=UTF-8, path.separator=;, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, file.encoding=UTF-8, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=Temurin-17.0.16+8, java.vendor.url.bug=https://github.com/adoptium/adoptium-support/issues, java.io.tmpdir=C:\Users\Ankit\AppData\Local\Temp\, com.zaxxer.hikari.pool_number=1, catalina.home=C:\Users\Ankit\AppData\Local\Temp\tomcat.8080.10652852905998829390, java.version=17.0.16, hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy, user.dir=C:\Users\Ankit\SwetaForRabo\banking-system, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, PID=20680, sun.os.patch.level=, CONSOLE_LOG_CHARSET=UTF-8, catalina.base=C:\Users\Ankit\AppData\Local\Temp\tomcat.8080.10652852905998829390, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@30ed2a26, native.encoding=Cp1252, java.library.path=C:\Program Files\Eclipse Adoptium\jdk-17.0.16.8-hotspot\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Users/Ankit/Documents/STS/sts-4.32.0.RELEASE//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_21.0.8.v20250724-1412/jre/bin/server;C:/Users/Ankit/Documents/STS/sts-4.32.0.RELEASE//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_21.0.8.v20250724-1412/jre/bin;C:\Program Files\Eclipse Adoptium\jdk-17.0.16.8-hotspot\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\dotnet\;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\Git\cmd;C:\Program Files\TortoiseGit\bin;C:\Program Files\nodejs\;C:\Users\Ankit\AppData\Local\Microsoft\WindowsApps;C:\Users\Ankit\AppData\Local\GitHubDesktop\bin;C:\Users\Ankit\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\Ankit\.dotnet\tools;C:\Users\Ankit\AppData\Roaming\npm;C:\Users\Ankit\Documents\STS\sts-4.32.0.RELEASE;;., stderr.encoding=UTF-8, java.vendor=Eclipse Adoptium, java.vm.info=mixed mode, sharing, java.vm.version=17.0.16+8, java.specification.maintenance.version=1, sun.io.unicode.encoding=UnicodeLittle, hibernate.archive.scanner=org.hibernate.boot.archive.scan.internal.DisabledScanner, hibernate.connection.datasource=HikariDataSource (HikariPool-1), CONSOLE_LOG_PATTERN=%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg%n, java.class.version=61.0, LOGGED_APPLICATION_NAME=[banking-system] }
2025-10-30 20:57:00 - o.h.internal.SessionFactoryImpl - Session factory constructed with filter configurations : {}
2025-10-30 20:57:00 - o.h.v.i.x.config.ValidationXmlParser - Trying to load META-INF/validation.xml for XML based Validator configuration.
2025-10-30 20:57:00 - o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via TCCL
2025-10-30 20:57:00 - o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2025-10-30 20:57:00 - o.h.v.i.x.config.ValidationXmlParser - No META-INF/validation.xml found. Using annotation based configuration only.
2025-10-30 20:57:00 - o.h.v.i.e.r.TraversableResolvers - Found jakarta.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2025-10-30 20:57:00 - o.h.v.i.e.r.TraversableResolvers - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2025-10-30 20:57:00 - o.h.v.m.ResourceBundleMessageInterpolator - Loaded expression factory via original TCCL
2025-10-30 20:57:00 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000252: Using org.hibernate.validator.internal.engine.DefaultPropertyNodeNameProvider as property node name provider.
2025-10-30 20:57:00 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator as ValidatorFactory-scoped message interpolator.
2025-10-30 20:57:00 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.resolver.JPATraversableResolver as ValidatorFactory-scoped traversable resolver.
2025-10-30 20:57:00 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.
2025-10-30 20:57:00 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.
2025-10-30 20:57:00 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.Account] is safe
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.Account
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.Card] is safe
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.Card
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.User] is safe
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.User
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.Transaction] is safe
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.Transaction
2025-10-30 20:57:00 - o.h.s.i.SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@65f470f8] under count; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@1610c03c] under every; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@332fa1c] under any; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@713497cd] under sinh; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@63318b56] under cosh; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@19e5e110] under tanh; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1e295f7f] under pi; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4b762988] under log; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : length -> character_length
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@4a3516fd] under position; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@41289e88] under overlay; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@560be8c0] under trim; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@8e77c5b] under cast; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@776a3365] under collate; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@3bc18fec] under extract; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@2ff62720] under ifnull; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@3fad8636] under pad; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@2e847e71] under str; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@60cc20e1] under format; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@68a94e58] under timestampadd; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@14624acc] under timestampdiff; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : dateadd -> timestampadd
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : datediff -> timestampdiff
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@656302c] under current_date; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@6f6a2ac8] under current_time; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@49809275] under current_timestamp; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : current date -> current_date
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : current time -> current_time
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : current timestamp -> current_timestamp
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@68b3979d] under local_date; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5fd31df7] under local_time; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@61d150af] under local_datetime; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2c8f65da] under offset_datetime; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : local date -> local_date
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : local time -> local_time
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : local datetime -> local_datetime
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : offset datetime -> offset_datetime
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@587400a9] under instant; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : current_instant -> instant
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@5ff29e8b] under sql; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log)] under log; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4b762988
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@7acfcfc4] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tanh)] under tanh; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@19e5e110
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sinh)] under sinh; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@713497cd
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cosh)] under cosh; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@63318b56
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acosh)] under acosh; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asinh)] under asinh; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atanh)] under atanh; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cbrt)] under cbrt; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1e295f7f
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(md5)] under md5; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(initcap)] under initcap; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substring; prior registration was NamedSqmFunctionTemplate(substring)
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(to_number)] under to_number; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(to_char)] under to_char; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(to_date)] under to_date; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(to_timestamp)] under to_timestamp; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ConcatPipeFunction@3fe5ad73] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@5fd31df7
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@61d150af
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LengthFunction@38856d6e] under character_length; prior registration was NamedSqmFunctionTemplate(character_length)
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : length -> character_length
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LengthFunction@299ea986] under bit_length; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LengthFunction@1dd9a3ae] under octet_length; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(chr)] under chr; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : char -> chr
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@79bf39e5] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@4a3516fd
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6ac2c5a1] under bitand; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@364c93e6] under bitor; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@66589252] under bitxor; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@66a8ff6d] under bitnot; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : every -> bool_and
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : any -> bool_or
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abbc1d4] under median; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev)] under stddev; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(variance)] under variance; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(covar_pop)] under covar_pop; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(covar_samp)] under covar_samp; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(corr)] under corr; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(regr_avgx)] under regr_avgx; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(regr_avgy)] under regr_avgy; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(regr_count)] under regr_count; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(regr_intercept)] under regr_intercept; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(regr_r2)] under regr_r2; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(regr_slope)] under regr_slope; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(regr_sxx)] under regr_sxx; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(regr_sxy)] under regr_sxy; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(regr_syy)] under regr_syy; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6ad26381] under insert; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.MultipatternSqmFunctionDescriptor@6b576ff8] under overlay; prior registration was org.hibernate.dialect.function.InsertSubstringOverlayEmulation@41289e88
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.MultipatternSqmFunctionDescriptor@25e8a111] under locate; prior registration was NamedSqmFunctionTemplate(locate)
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggStringAggEmulation@21780905] under listagg; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.PostgreSQLArrayConstructorFunction@3c271988] under array; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.PostgreSQLArrayConstructorFunction@3aed692d] under array_list; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.ArrayAggFunction@74cd8c55] under array_agg; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.PostgreSQLArrayPositionFunction@da67c46] under array_position; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.PostgreSQLArrayPositionsFunction@1ee6434] under array_positions; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.PostgreSQLArrayPositionsFunction@1bbc1b90] under array_positions_list; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@29e3c28] under array_length; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.DynamicDispatchFunction@795131d6] under length; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.PostgreSQLArrayConcatFunction@5a4e492c] under array_concat; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.PostgreSQLArrayConcatElementFunction@33a8f553] under array_prepend; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.PostgreSQLArrayConcatElementFunction@61ca5134] under array_append; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.ArrayContainsOperatorFunction@5cba474f] under array_contains; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.ArrayContainsOperatorFunction@291028d7] under array_contains_nullable; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.ArrayIncludesOperatorFunction@6db04a6] under array_includes; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.ArrayIncludesOperatorFunction@8f374de] under array_includes_nullable; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.ArrayIntersectsOperatorFunction@4e26c308] under array_intersects; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.ArrayIntersectsOperatorFunction@7c8f803d] under array_intersects_nullable; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : array_overlaps -> array_intersects
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : array_overlaps_nullable -> array_intersects_nullable
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@7ce4498f] under array_get; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.ArraySetUnnestFunction@399fd710] under array_set; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(array_remove)] under array_remove; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.ArrayRemoveIndexUnnestFunction@51566ce0] under array_remove_index; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1734b1a] under array_slice; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(array_replace)] under array_replace; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@17e6d07b] under array_trim; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.PostgreSQLArrayFillFunction@5b1f0f26] under array_fill; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.PostgreSQLArrayFillFunction@7120daa6] under array_fill_list; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.array.ArrayToStringFunction@3340ff7c] under array_to_string; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(make_date)] under make_date; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(make_time)] under make_time; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(make_timestamp)] under make_timestamp; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(make_timestamptz)] under make_timestamptz; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@5dd227b7] under mode; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3d3b852e] under percentile_cont; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@14ba7f15] under percentile_disc; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@6f89ad03] under rank; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@f287a4e] under dense_rank; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@3879feec] under percent_rank; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@71d2261e] under cume_dist; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.PostgreSQLMinMaxFunction@8dcacf1] under min; prior registration was NamedSqmFunctionTemplate(min)
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.PostgreSQLMinMaxFunction@50f13494] under max; prior registration was NamedSqmFunctionTemplate(max)
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@73c09a98] under bitxor; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@66589252
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.PostgreSQLTruncRoundFunction@2c92f094] under round; prior registration was NamedSqmFunctionTemplate(round)
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.dialect.function.PostgreSQLTruncFunction@13018f00] under trunc; prior registration was null
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registering alternate key : truncate -> trunc
2025-10-30 20:57:00 - o.h.q.s.function.SqmFunctionRegistry - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@abf1816] under date_trunc; prior registration was null
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - abs(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double acos(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double acosh(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean any(BOOLEAN predicate)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array( ... )
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_agg(arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_append( ... )
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_concat( ... )
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean array_contains(ARRAY haystackArray, OBJECT needleElementOrArray)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean array_contains_nullable(ARRAY haystackArray, OBJECT needleElementOrArray)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_fill(OBJECT element, INTEGER elementCount)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_fill_list(OBJECT element, INTEGER elementCount)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_get(ARRAY array, INTEGER index)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean array_includes(ARRAY haystackArray, OBJECT needleArray)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean array_includes_nullable(ARRAY haystackArray, OBJECT needleArray)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean array_intersects(ARRAY array0, OBJECT array1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean array_intersects_nullable(ARRAY array0, OBJECT array1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Integer array_length(ARRAY array)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_list( ... )
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean array_overlaps(ARRAY array0, OBJECT array1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean array_overlaps_nullable(ARRAY array0, OBJECT array1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Integer array_position(ARRAY array, OBJECT element[, INTEGER startPosition])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - int[] array_positions(ARRAY array, OBJECT element)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - List array_positions_list(ARRAY array, OBJECT element)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_prepend( ... )
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_remove( ... )
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_remove_index( ... )
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_replace(ARRAY array, OBJECT old, OBJECT new)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_set( ... )
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_slice(ARRAY array, INTEGER start, INTEGER end)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String array_to_string( ... )
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - array_trim(ARRAY array, INTEGER elementsToRemove)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Integer ascii(STRING arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double asin(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double asinh(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double atan(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double atan2(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double atanh(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - avg(arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - bit_and(arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Integer bit_length(STRING_OR_CLOB arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - bit_or(arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - bitand(arg0, arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - bitnot(arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - bitor(arg0, arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - bitxor(arg0, arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean bool_and(BOOLEAN predicate)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean bool_or(BOOLEAN predicate)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - cast(arg as Type)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double cbrt(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - ceiling(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Character char(INTEGER arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Integer character_length(STRING_OR_CLOB arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Character chr(INTEGER arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - coalesce(arg0[, arg1[, ...]])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String collate(STRING string as COLLATION collation)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - (STRING string0[, STRING string1[, ...]])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double corr(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double cos(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double cosh(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double cot(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Long count([distinct ]{arg|*})
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double covar_pop(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double covar_samp(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double cume_dist([arg0[, ...]])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Date current date
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Time current time
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Timestamp current timestamp
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Date current_date
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Instant current_instant
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Time current_time
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Timestamp current_timestamp
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - date_trunc(STRING field, TEMPORAL datetime)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Long|Double datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double degrees(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Long dense_rank([arg0[, ...]])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Boolean every(BOOLEAN predicate)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double exp(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - first_valueANY value
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - floor(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String format(TEMPORAL datetime as STRING pattern)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - ifnull(arg0, arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String initcap(arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Instant instant
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - lagANY value[, INTEGER offset[, ANY default]]
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - last_valueANY value
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - leadANY value[, INTEGER offset[, ANY default]]
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String left(STRING string, INTEGER length)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - length
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String listagg(STRING arg0, STRING arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double ln(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - LocalDate local date
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - LocalDateTime local datetime
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - LocalTime local time
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - LocalDate local_date
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - LocalDateTime local_datetime
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - LocalTime local_time
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Time localtime
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Timestamp localtimestamp
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Integer locate(STRING pattern, STRING string[, INTEGER start])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double log(NUMERIC arg0[, NUMERIC arg1])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double log10(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String lower(STRING string)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String lpad(STRING string, INTEGER length[, STRING padding])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String ltrim(STRING string[, STRING characters])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Date make_date(INTEGER arg0, INTEGER arg1, INTEGER arg2)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Time make_time(INTEGER arg0, INTEGER arg1, INTEGER arg2)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Timestamp make_timestamp(INTEGER arg0, INTEGER arg1, INTEGER arg2, INTEGER arg3, INTEGER arg4, INTEGER arg5)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Timestamp make_timestamptz(INTEGER arg0, INTEGER arg1, INTEGER arg2, INTEGER arg3, INTEGER arg4, INTEGER arg5[, INTEGER arg6])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - max(COMPARABLE arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String md5(arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double median(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - min(COMPARABLE arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Integer mod(INTEGER arg0, INTEGER arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - mode()
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - nth_valueANY value, INTEGER nth
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - nullif(arg0, arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Integer octet_length(STRING_OR_CLOB arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - OffsetDateTime offset datetime
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - OffsetDateTime offset_datetime
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String overlay(string placing replacement from start[ for length])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double percent_rank([arg0[, ...]])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - percentile_cont(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - percentile_disc(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double pi
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Integer position(STRING pattern in STRING string)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double power(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double radians(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Long rank([arg0[, ...]])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double regr_avgx(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double regr_avgy(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double regr_count(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double regr_intercept(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double regr_r2(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double regr_slope(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double regr_sxx(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double regr_sxy(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double regr_syy(NUMERIC arg0, NUMERIC arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String repeat(STRING string, INTEGER times)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String replace(STRING string, STRING pattern, STRING replacement)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String right(STRING string, INTEGER length)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - round(NUMERIC number[, INTEGER places])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Long row_number()
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String rpad(STRING string, INTEGER length[, STRING padding])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String rtrim(STRING string[, STRING characters])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Integer sign(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double sin(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double sinh(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String soundex(arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - sql
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double sqrt(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double stddev(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double stddev_pop(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double stddev_samp(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String str(arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String substr(STRING string, INTEGER start[, INTEGER length])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - sum(arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double tan(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double tanh(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Long|Double timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String to_char(ANY arg0[, STRING arg1, STRING arg2])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Date to_date(STRING arg0[, STRING arg1, STRING arg2])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double to_number(STRING arg0[, STRING arg1, STRING arg2])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Timestamp to_timestamp(STRING arg0[, STRING arg1, STRING arg2])
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String translate(STRING arg0, STRING arg1, STRING arg2)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - trunc( ... )
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - truncate( ... )
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - String upper(STRING string)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double var_pop(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double var_samp(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.HQL_FUNCTIONS - Double variance(NUMERIC arg)
2025-10-30 20:57:00 - org.hibernate.orm.query.plan.cache - Starting QueryInterpretationCache(2048)
2025-10-30 20:57:00 - o.h.s.i.SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2025-10-30 20:57:00 - o.h.e.i.EntityCopyObserverFactoryInitiator - Configured EntityCopyObserver strategy: disallow
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.Account] is safe
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.Account
2025-10-30 20:57:00 - o.h.b.i.b.BytecodeProviderImpl - HHH000513: Unable to create the ReflectionOptimizer for [com.rabobank.banking.domain.model.Account]: private accessor [accountNumber]
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.Card] is safe
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.Card
2025-10-30 20:57:00 - o.h.b.i.b.BytecodeProviderImpl - HHH000513: Unable to create the ReflectionOptimizer for [com.rabobank.banking.domain.model.Card]: private accessor [account]
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.User] is safe
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.User
2025-10-30 20:57:00 - o.h.b.i.b.BytecodeProviderImpl - HHH000513: Unable to create the ReflectionOptimizer for [com.rabobank.banking.domain.model.User]: private accessor [createdAt]
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - Not known whether passed class name [com.rabobank.banking.domain.model.Transaction] is safe
2025-10-30 20:57:00 - o.h.b.internal.ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.rabobank.banking.domain.model.Transaction
2025-10-30 20:57:00 - o.h.b.i.b.BytecodeProviderImpl - HHH000513: Unable to create the ReflectionOptimizer for [com.rabobank.banking.domain.model.Transaction]: private accessor [accountId]
2025-10-30 20:57:00 - o.h.orm.model.mapping.creation - Forcing FetchTiming.IMMEDIATE for to-one association : NavigableRole[com.rabobank.banking.domain.model.Account].card
2025-10-30 20:57:00 - o.h.orm.model.mapping.creation - Starting post-init callbacks
2025-10-30 20:57:00 - o.h.orm.model.mapping.creation - Starting PostInitCallbackEntry : To-one key - NavigableRole[com.rabobank.banking.domain.model.Account.card]
2025-10-30 20:57:00 - o.h.orm.model.mapping.creation - Starting PostInitCallbackEntry : To-one key - NavigableRole[com.rabobank.banking.domain.model.Account.user]
2025-10-30 20:57:00 - o.h.orm.model.mapping.creation - Starting PostInitCallbackEntry : Entity(com.rabobank.banking.domain.model.Account) `staticFetchableList` generator
2025-10-30 20:57:00 - o.h.orm.model.mapping.creation - Starting PostInitCallbackEntry : To-one key - NavigableRole[com.rabobank.banking.domain.model.Card.account]
2025-10-30 20:57:00 - o.h.orm.model.mapping.creation - Starting PostInitCallbackEntry : Entity(com.rabobank.banking.domain.model.Card) `staticFetchableList` generator
2025-10-30 20:57:00 - o.h.orm.model.mapping.creation - Starting PostInitCallbackEntry : Entity(com.rabobank.banking.domain.model.User) `staticFetchableList` generator
2025-10-30 20:57:00 - o.h.orm.model.mapping.creation - Starting PostInitCallbackEntry : Entity(com.rabobank.banking.domain.model.Transaction) `staticFetchableList` generator
2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.create - Created new SQL alias : a1_0
2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.create - Registration of TableGroup [StandardTableGroup(com.rabobank.banking.domain.model.Account)] with identifierForTableGroup [com.rabobank.banking.domain.model.Account] for NavigablePath [com.rabobank.banking.domain.model.Account] 
2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.create - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@6a0aa5e2] with identifierForTableGroup [com.rabobank.banking.domain.model.Account.user] for NavigablePath [com.rabobank.banking.domain.model.Account.user] 
2025-10-30 20:57:01 - org.hibernate.orm.results.graph.AST - DomainResult Graph:
 \-EntityResultImpl [com.rabobank.banking.domain.model.Account]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Account.accountNumber]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Account.active]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Account.balance]
 |  +-EntityFetchSelectImpl [com.rabobank.banking.domain.model.Account.card]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Account.createdAt]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Account.updatedAt]
 |  \-EntityDelayedFetchImpl [com.rabobank.banking.domain.model.Account.user]

2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.tree - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (a1 : com.rabobank.banking.domain.model.Account) {
          primaryTableReference : accounts as a1_0
          TableGroupJoins {
            left  join LazyTableGroup (u1 : com.rabobank.banking.domain.model.Account.user) {
            }
          }
        }
      }
    }

2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister - Static SQL for entity: com.rabobank.banking.domain.model.Account
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Version select: /* get version com.rabobank.banking.domain.model.Account */ select account_id from accounts where account_id=?
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Insert (0): /* insert for com.rabobank.banking.domain.model.Account */insert into accounts (account_number,active,balance,created_at,updated_at,user_id,account_id) values (?,?,?,?,?,?,?)
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Update (0): /* update for com.rabobank.banking.domain.model.Account */update accounts set account_number=?,active=?,balance=?,updated_at=?,user_id=? where account_id=?
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Delete (0): /* delete for com.rabobank.banking.domain.model.Account */delete from accounts where account_id=?
2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.create - Created new SQL alias : c1_0
2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.create - Registration of TableGroup [StandardTableGroup(com.rabobank.banking.domain.model.Card)] with identifierForTableGroup [com.rabobank.banking.domain.model.Card] for NavigablePath [com.rabobank.banking.domain.model.Card] 
2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.create - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@3cc548f6] with identifierForTableGroup [com.rabobank.banking.domain.model.Card.account] for NavigablePath [com.rabobank.banking.domain.model.Card.account] 
2025-10-30 20:57:01 - org.hibernate.orm.results.graph.AST - DomainResult Graph:
 \-EntityResultImpl [com.rabobank.banking.domain.model.Card]
 |  +-EntityDelayedFetchImpl [com.rabobank.banking.domain.model.Card.account]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Card.active]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Card.cardHolderName]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Card.cardNumber]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Card.cardType]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Card.createdAt]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Card.expiryDate]
 |  \-BasicFetch [com.rabobank.banking.domain.model.Card.updatedAt]

2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.tree - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : com.rabobank.banking.domain.model.Card) {
          primaryTableReference : cards as c1_0
          TableGroupJoins {
            left  join LazyTableGroup (a1 : com.rabobank.banking.domain.model.Card.account) {
            }
          }
        }
      }
    }

2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister - Static SQL for entity: com.rabobank.banking.domain.model.Card
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Version select: /* get version com.rabobank.banking.domain.model.Card */ select id from cards where id=?
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Insert (0): /* insert for com.rabobank.banking.domain.model.Card */insert into cards (account_id,active,card_holder_name,card_number,card_type,created_at,expiry_date,updated_at) values (?,?,?,?,?,?,?,?)
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Update (0): /* update for com.rabobank.banking.domain.model.Card */update cards set account_id=?,active=?,card_holder_name=?,card_number=?,card_type=?,expiry_date=?,updated_at=? where id=?
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Delete (0): /* delete for com.rabobank.banking.domain.model.Card */delete from cards where id=?
2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.create - Created new SQL alias : u1_0
2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.create - Registration of TableGroup [StandardTableGroup(com.rabobank.banking.domain.model.User)] with identifierForTableGroup [com.rabobank.banking.domain.model.User] for NavigablePath [com.rabobank.banking.domain.model.User] 
2025-10-30 20:57:01 - org.hibernate.orm.results.graph.AST - DomainResult Graph:
 \-EntityResultImpl [com.rabobank.banking.domain.model.User]
 |  +-BasicFetch [com.rabobank.banking.domain.model.User.createdAt]
 |  +-BasicFetch [com.rabobank.banking.domain.model.User.email]
 |  +-BasicFetch [com.rabobank.banking.domain.model.User.firstName]
 |  +-BasicFetch [com.rabobank.banking.domain.model.User.lastName]
 |  +-BasicFetch [com.rabobank.banking.domain.model.User.phoneNumber]
 |  \-BasicFetch [com.rabobank.banking.domain.model.User.updatedAt]

2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.tree - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (u1 : com.rabobank.banking.domain.model.User) {
          primaryTableReference : users as u1_0
        }
      }
    }

2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister - Static SQL for entity: com.rabobank.banking.domain.model.User
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Version select: /* get version com.rabobank.banking.domain.model.User */ select id from users where id=?
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Insert (0): /* insert for com.rabobank.banking.domain.model.User */insert into users (created_at,email,first_name,last_name,phone_number,updated_at) values (?,?,?,?,?,?)
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Update (0): /* update for com.rabobank.banking.domain.model.User */update users set email=?,first_name=?,last_name=?,phone_number=?,updated_at=? where id=?
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Delete (0): /* delete for com.rabobank.banking.domain.model.User */delete from users where id=?
2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.create - Created new SQL alias : t1_0
2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.create - Registration of TableGroup [StandardTableGroup(com.rabobank.banking.domain.model.Transaction)] with identifierForTableGroup [com.rabobank.banking.domain.model.Transaction] for NavigablePath [com.rabobank.banking.domain.model.Transaction] 
2025-10-30 20:57:01 - org.hibernate.orm.results.graph.AST - DomainResult Graph:
 \-EntityResultImpl [com.rabobank.banking.domain.model.Transaction]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Transaction.accountId]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Transaction.amount]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Transaction.balanceAfter]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Transaction.balanceBefore]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Transaction.cardType]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Transaction.description]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Transaction.fee]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Transaction.status]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Transaction.toAccountId]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Transaction.totalAmount]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Transaction.transactionDate]
 |  \-BasicFetch [com.rabobank.banking.domain.model.Transaction.type]

2025-10-30 20:57:01 - org.hibernate.orm.sql.ast.tree - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : com.rabobank.banking.domain.model.Transaction) {
          primaryTableReference : transactions as t1_0
        }
      }
    }

2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister - Static SQL for entity: com.rabobank.banking.domain.model.Transaction
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Version select: /* get version com.rabobank.banking.domain.model.Transaction */ select transaction_id from transactions where transaction_id=?
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Insert (0): /* insert for com.rabobank.banking.domain.model.Transaction */insert into transactions (account_id,amount,balance_after,balance_before,card_type,description,fee,status,to_account_id,total_amount,transaction_date,type,transaction_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Update (0): /* update for com.rabobank.banking.domain.model.Transaction */update transactions set account_id=?,amount=?,balance_after=?,balance_before=?,card_type=?,description=?,fee=?,status=?,to_account_id=?,total_amount=?,type=? where transaction_id=?
2025-10-30 20:57:01 - o.h.p.entity.AbstractEntityPersister -  Delete (0): /* delete for com.rabobank.banking.domain.model.Transaction */delete from transactions where transaction_id=?
2025-10-30 20:57:01 - o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-30 20:57:01 - o.h.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@72ec16f8] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@1c80f8dd]
2025-10-30 20:57:01 - o.h.q.named.NamedObjectRepository - Checking 0 named HQL queries
2025-10-30 20:57:01 - o.h.q.named.NamedObjectRepository - Checking 0 named SQL queries
2025-10-30 20:57:01 - o.h.internal.SessionFactoryRegistry - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@128d397c
2025-10-30 20:57:01 - o.h.internal.SessionFactoryRegistry - Registering SessionFactory: eabb6749-1e60-4f8b-b7cc-69e18710c162 (<unnamed>)
2025-10-30 20:57:01 - o.h.internal.SessionFactoryRegistry - Not binding SessionFactory to JNDI, no JNDI name configured
2025-10-30 20:57:01 - o.h.internal.SessionFactoryImpl - Instantiated SessionFactory
2025-10-30 20:57:01 - o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-30 20:57:01 - o.h.s.internal.StatisticsInitiator - Statistics initialized [enabled=false]
2025-10-30 20:57:01 - o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-30 20:57:01 - org.hibernate.orm.query.hql - HQL : SELECT a FROM Account a JOIN FETCH a.user JOIN FETCH a.card WHERE a.active = true
2025-10-30 20:57:02 - org.hibernate.orm.query.sqm.ast - SqmStatement Tree :
    -> [select]
      -> [query-spec]
        -> [select]
          -> [selection]
            -> [root] - `com.rabobank.banking.domain.model.Account(a)`
              -> [joins]
                -> [attribute] - `com.rabobank.banking.domain.model.Account(a).user(1)`
                    [fetched = true]
                <- [attribute] - `com.rabobank.banking.domain.model.Account(a).user(1)`
                -> [attribute] - `com.rabobank.banking.domain.model.Account(a).card(2)`
                    [fetched = true]
                <- [attribute] - `com.rabobank.banking.domain.model.Account(a).card(2)`
              <- [joins]
            <- [root] - `com.rabobank.banking.domain.model.Account(a)`
          <- [selection]
        <- [select]
        -> [from]
          -> [root] - `com.rabobank.banking.domain.model.Account(a)`
            -> [joins]
              -> [attribute] - `com.rabobank.banking.domain.model.Account(a).user(1)`
                  [fetched = true]
              <- [attribute] - `com.rabobank.banking.domain.model.Account(a).user(1)`
              -> [attribute] - `com.rabobank.banking.domain.model.Account(a).card(2)`
                  [fetched = true]
              <- [attribute] - `com.rabobank.banking.domain.model.Account(a).card(2)`
            <- [joins]
          <- [root] - `com.rabobank.banking.domain.model.Account(a)`
        <- [from]
        -> [where]
          -> [EQUAL]
              -> [basic-path] - `com.rabobank.banking.domain.model.Account(a).active`
          <- [EQUAL]
        <- [where]
      <- [query-spec]
    <- [select]

2025-10-30 20:57:02 - org.hibernate.orm.query.hql - HQL : SELECT a FROM Account a WHERE a.accountId = :accountId
2025-10-30 20:57:02 - o.hibernate.orm.query.sqm.creation - Applying inferable type to SqmExpression [SqmNamedParameter(accountId)] : null -> SqmBasicValuedSimplePath(com.rabobank.banking.domain.model.Account(a).accountId)
2025-10-30 20:57:02 - org.hibernate.orm.query.sqm.ast - SqmStatement Tree :
    -> [select]
      -> [query-spec]
        -> [select]
          -> [selection]
            -> [root] - `com.rabobank.banking.domain.model.Account(a)`
            <- [root] - `com.rabobank.banking.domain.model.Account(a)`
          <- [selection]
        <- [select]
        -> [from]
          -> [root] - `com.rabobank.banking.domain.model.Account(a)`
          <- [root] - `com.rabobank.banking.domain.model.Account(a)`
        <- [from]
        -> [where]
          -> [EQUAL]
              -> [basic-path] - `com.rabobank.banking.domain.model.Account(a).accountId`
              :accountId
          <- [EQUAL]
        <- [where]
      <- [query-spec]
    <- [select]

2025-10-30 20:57:02 - o.h.v.m.ResourceBundleMessageInterpolator - Loaded expression factory via original TCCL
2025-10-30 20:57:02 - o.h.v.i.e.AbstractConfigurationImpl - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2025-10-30 20:57:02 - o.h.v.i.e.AbstractConfigurationImpl - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2025-10-30 20:57:02 - o.h.v.i.x.config.ValidationXmlParser - Trying to load META-INF/validation.xml for XML based Validator configuration.
2025-10-30 20:57:02 - o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via user class loader
2025-10-30 20:57:02 - o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via TCCL
2025-10-30 20:57:02 - o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2025-10-30 20:57:02 - o.h.v.i.x.config.ValidationXmlParser - No META-INF/validation.xml found. Using annotation based configuration only.
2025-10-30 20:57:02 - o.h.v.i.e.r.TraversableResolvers - Found jakarta.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2025-10-30 20:57:02 - o.h.v.i.e.r.TraversableResolvers - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2025-10-30 20:57:02 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000252: Using org.hibernate.validator.internal.engine.DefaultPropertyNodeNameProvider as property node name provider.
2025-10-30 20:57:02 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator as ValidatorFactory-scoped message interpolator.
2025-10-30 20:57:02 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.resolver.JPATraversableResolver as ValidatorFactory-scoped traversable resolver.
2025-10-30 20:57:02 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.
2025-10-30 20:57:02 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.
2025-10-30 20:57:02 - o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.
2025-10-30 20:57:02 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - 9 mappings in 'requestMappingHandlerMapping'
2025-10-30 20:57:02 - o.s.w.s.h.SimpleUrlHandlerMapping - Patterns [/webjars/**, /**, /swagger-ui*/*swagger-initializer.js, /swagger-ui*/**] in 'resourceHandlerMapping'
2025-10-30 20:57:02 - o.s.w.s.m.m.a.RequestMappingHandlerAdapter - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-30 20:57:02 - o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - ControllerAdvice beans: 2 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-30 20:57:03 - o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-30 20:57:03 - c.r.banking.BankingSystemApplication - Started BankingSystemApplication in 10.046 seconds (process running for 10.625)
2025-10-30 20:57:09 - o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - Detected StandardServletMultipartResolver
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - Detected AcceptHeaderLocaleResolver
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - Detected FixedThemeResolver
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@7bec83d5
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - Detected org.springframework.web.servlet.support.SessionFlashMapManager@1942a960
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - GET "/api/accounts/balances", parameters={}
2025-10-30 20:57:09 - o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2025-10-30 20:57:09 - o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-10-30 20:57:09 - o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.rabobank.banking.controller.GlobalExceptionHandler#handleGenericException(Exception, WebRequest)
2025-10-30 20:57:09 - c.r.b.c.GlobalExceptionHandler - Unexpected error occurred
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/accounts/balances.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:165)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:88)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:113)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:83)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:72)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1774)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:973)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:491)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-10-30 20:57:09 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 20:57:09 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [ErrorResponseDto(timestamp=2025-10-30T20:57:09.546260700, status=500, error=Internal Server Error, m (truncated)...]
2025-10-30 20:57:09 - o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/accounts/balances.]
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - Completed 500 INTERNAL_SERVER_ERROR
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - GET "/api/accounts/balances", parameters={}
2025-10-30 20:57:09 - o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2025-10-30 20:57:09 - o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-10-30 20:57:09 - o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.rabobank.banking.controller.GlobalExceptionHandler#handleGenericException(Exception, WebRequest)
2025-10-30 20:57:09 - c.r.b.c.GlobalExceptionHandler - Unexpected error occurred
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/accounts/balances.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:165)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:88)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:113)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:83)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:72)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1774)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:973)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:491)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-10-30 20:57:09 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 20:57:09 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [ErrorResponseDto(timestamp=2025-10-30T20:57:09.623289800, status=500, error=Internal Server Error, m (truncated)...]
2025-10-30 20:57:09 - o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/accounts/balances.]
2025-10-30 20:57:09 - o.s.web.servlet.DispatcherServlet - Completed 500 INTERNAL_SERVER_ERROR
2025-10-30 21:01:04 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 21:01:04 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 21:01:04 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 21:01:04 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 21:01:04 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 21:01:04 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 21:01:04 - org.hibernate.orm.sql.ast.create - Created new SQL alias : a1_0
2025-10-30 21:01:04 - org.hibernate.orm.sql.ast.create - Registration of TableGroup [StandardTableGroup(com.rabobank.banking.domain.model.Account(a))] with identifierForTableGroup [com.rabobank.banking.domain.model.Account] for NavigablePath [com.rabobank.banking.domain.model.Account] 
2025-10-30 21:01:04 - org.hibernate.orm.sql.ast.create - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@cea3e32] with identifierForTableGroup [com.rabobank.banking.domain.model.Account(a).user] for NavigablePath [com.rabobank.banking.domain.model.Account(a).user] 
2025-10-30 21:01:04 - org.hibernate.orm.sql.ast.create - Created new SQL alias : c1_0
2025-10-30 21:01:04 - org.hibernate.orm.sql.ast.create - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@951fea3] with identifierForTableGroup [com.rabobank.banking.domain.model.Account(a).card] for NavigablePath [com.rabobank.banking.domain.model.Account(a).card] 
2025-10-30 21:01:04 - org.hibernate.orm.sql.ast.create - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@8a5ca7e] with identifierForTableGroup [com.rabobank.banking.domain.model.Account(a).card(2).account] for NavigablePath [com.rabobank.banking.domain.model.Account(a).card(2).account] 
2025-10-30 21:01:04 - org.hibernate.orm.sql.ast.create - Created new SQL alias : u1_0
2025-10-30 21:01:04 - o.h.q.s.sql.BaseSqmToSqlAstConverter - Determining mapping-model type for SqmPath : SqmBasicValuedSimplePath(com.rabobank.banking.domain.model.Account(a).active) 
2025-10-30 21:01:04 - org.hibernate.orm.results.graph.AST - DomainResult Graph:
 \-EntityResultImpl [com.rabobank.banking.domain.model.Account(a)]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).accountNumber]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).active]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).balance]
 |  +-EntityFetchJoinedImpl [com.rabobank.banking.domain.model.Account(a).card(2)]
 |  |  +-CircularBiDirectionalFetchImpl [com.rabobank.banking.domain.model.Account(a).card(2).account]
 |  |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).card(2).active]
 |  |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).card(2).cardHolderName]
 |  |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).card(2).cardNumber]
 |  |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).card(2).cardType]
 |  |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).card(2).createdAt]
 |  |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).card(2).expiryDate]
 |  |  \-BasicFetch [com.rabobank.banking.domain.model.Account(a).card(2).updatedAt]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).createdAt]
 |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).updatedAt]
 |  \-EntityFetchJoinedImpl [com.rabobank.banking.domain.model.Account(a).user(1)]
 |  |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).user(1).createdAt]
 |  |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).user(1).email]
 |  |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).user(1).firstName]
 |  |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).user(1).lastName]
 |  |  +-BasicFetch [com.rabobank.banking.domain.model.Account(a).user(1).phoneNumber]
 |  |  \-BasicFetch [com.rabobank.banking.domain.model.Account(a).user(1).updatedAt]

2025-10-30 21:01:04 - org.hibernate.orm.sql.ast.tree - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (a1 : com.rabobank.banking.domain.model.Account(a)) {
          primaryTableReference : accounts as a1_0
          TableGroupJoins {
             join LazyTableGroup (u1 : com.rabobank.banking.domain.model.Account(a).user(1)) {
              primaryTableReference : users as u1_0
            }
             join LazyTableGroup (c1 : com.rabobank.banking.domain.model.Account(a).card(2)) {
              primaryTableReference : cards as c1_0
              TableGroupJoins {
                left  join LazyTableGroup (a2 : com.rabobank.banking.domain.model.Account(a).card(2).account) {
                }
              }
            }
          }
        }
      }
    }

2025-10-30 21:01:04 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 21:01:04 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 21:01:04 - org.hibernate.orm.results - Initializer list:
	  com.rabobank.banking.domain.model.Account(a).user(1) -> EntityJoinedFetchInitializer(com.rabobank.banking.domain.model.Account(a).user(1))@1981731620 (ToOneAttributeMapping(NavigableRole[com.rabobank.banking.domain.model.Account.user])@1730455483)
	  com.rabobank.banking.domain.model.Account(a) -> EntityJoinedFetchInitializer(com.rabobank.banking.domain.model.Account(a))@1291022756 (SingleTableEntityPersister(com.rabobank.banking.domain.model.Account))
	  com.rabobank.banking.domain.model.Account(a).card(2) -> EntityJoinedFetchInitializer(com.rabobank.banking.domain.model.Account(a).card(2))@1643353100 (ToOneAttributeMapping(NavigableRole[com.rabobank.banking.domain.model.Account.card])@416630949)

2025-10-30 21:01:04 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 21:01:04 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 21:01:04 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 21:01:04 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 21:01:04 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 21:01:04 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 21:01:04 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 21:01:04 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 21:01:04 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 21:01:04 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 21:01:04 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 21:01:04 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 21:01:04 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 21:01:04 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 21:01:04 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 21:01:04 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 21:01:04 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 21:01:04 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 21:30:44 - com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=9m15s610ms156µs1ns).
2025-10-30 21:30:51 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 21:30:51 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 21:30:51 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 21:30:51 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 21:30:51 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 21:30:51 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 21:30:51 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 21:30:51 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 21:30:52 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 21:30:52 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 21:30:52 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 21:30:52 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 21:30:52 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 21:30:52 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 21:30:52 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 21:30:52 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 21:30:52 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 21:30:52 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 21:30:52 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 21:30:52 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 21:30:52 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 21:30:52 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 21:30:52 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 21:30:52 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 21:30:52 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 21:30:52 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 21:30:56 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 21:30:56 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 21:30:56 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 21:30:56 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 21:30:56 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 21:30:56 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 21:30:56 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 21:30:56 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 21:30:56 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 21:30:56 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 21:30:56 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 21:30:56 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 21:30:56 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 21:35:37 - o.s.web.servlet.DispatcherServlet - GET "/swagger-ui/index.html", parameters={}
2025-10-30 21:35:37 - o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]]
2025-10-30 21:35:37 - o.s.web.servlet.DispatcherServlet - Completed 304 NOT_MODIFIED
2025-10-30 21:35:37 - o.s.web.servlet.DispatcherServlet - GET "/swagger-ui/swagger-initializer.js", parameters={}
2025-10-30 21:35:37 - o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]]
2025-10-30 21:35:37 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 21:35:37 - o.s.web.servlet.DispatcherServlet - GET "/v3/api-docs/swagger-config", parameters={}
2025-10-30 21:35:37 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to org.springdoc.webmvc.ui.SwaggerConfigResource#openapiJson(HttpServletRequest)
2025-10-30 21:35:37 - o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json]
2025-10-30 21:35:37 - o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{configUrl=/v3/api-docs/swagger-config, oauth2RedirectUrl=http://localhost:8080/swagger-ui/oauth2-re (truncated)...]
2025-10-30 21:35:37 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 21:35:37 - o.s.web.servlet.DispatcherServlet - GET "/v3/api-docs", parameters={}
2025-10-30 21:35:37 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to org.springdoc.webmvc.api.OpenApiWebMvcResource#openapiJson(HttpServletRequest, String, Locale)
2025-10-30 21:35:38 - o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 762 ms
2025-10-30 21:35:38 - o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [application/json, */*] and supported [application/json]
2025-10-30 21:35:38 - o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{123, 34, 111, 112, 101, 110, 97, 112, 105, 34, 58, 34, 51, 46, 48, 46, 49, 34, 44, 34, 105, 110, 10 (truncated)...]
2025-10-30 21:35:38 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 21:35:48 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 21:35:48 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 21:35:48 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 21:35:48 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 21:35:48 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 21:35:48 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 21:35:48 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 21:35:48 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 21:35:48 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 21:35:48 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 21:35:48 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 21:35:48 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 21:35:48 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 21:54:22 - o.s.web.servlet.DispatcherServlet - GET "/v3/api-docs.yaml", parameters={}
2025-10-30 21:54:22 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to org.springdoc.webmvc.api.OpenApiWebMvcResource#openapiYaml(HttpServletRequest, String, Locale)
2025-10-30 21:54:22 - o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 225 ms
2025-10-30 21:54:22 - o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/vnd.oai.openapi;q=0.2', given [text/html, image/gif, image/jpeg, */*;q=0.2] and supported [application/vnd.oai.openapi]
2025-10-30 21:54:22 - o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{111, 112, 101, 110, 97, 112, 105, 58, 32, 51, 46, 48, 46, 49, 10, 105, 110, 102, 111, 58, 10, 32, 3 (truncated)...]
2025-10-30 21:54:22 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:11:57 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:11:57 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:11:57 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:11:57 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:11:57 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:11:57 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:11:57 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:11:57 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:11:57 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:11:57 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:11:57 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:11:57 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:11:57 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:11:57 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:11:57 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:11:57 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:11:57 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:11:57 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:11:57 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:11:57 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:11:57 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:11:57 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:11:57 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:11:57 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:11:57 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:11:57 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:11:59 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:11:59 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:11:59 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:11:59 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:11:59 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:11:59 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:11:59 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:11:59 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:11:59 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:11:59 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:11:59 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:11:59 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:11:59 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:11:59 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:11:59 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:11:59 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:11:59 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:11:59 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:11:59 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:11:59 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:11:59 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:11:59 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:11:59 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:11:59 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:11:59 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:11:59 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:12:00 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:12:00 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:12:00 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:12:00 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:12:00 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:12:00 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:12:00 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:12:00 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:12:00 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:12:00 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:12:00 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:12:00 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:12:00 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:12:00 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:12:00 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:12:00 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:12:00 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:12:00 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:12:00 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:12:00 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:12:00 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:12:00 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:12:00 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:12:00 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:12:00 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:12:00 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:12:00 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:12:00 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:12:00 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:12:00 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:12:00 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:12:00 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:12:00 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:12:00 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:12:00 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:12:00 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:12:00 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:12:00 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:12:00 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:12:00 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:12:00 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:12:01 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:12:01 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:12:01 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:12:01 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:12:01 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:12:01 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:12:01 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:12:01 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:12:01 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:12:01 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:12:01 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:12:01 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:12:01 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:12:01 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:12:01 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:12:01 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:12:01 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:12:01 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:12:01 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:12:01 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:12:01 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:12:01 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:12:01 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:12:01 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:12:01 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:12:01 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:13:22 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:13:22 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:13:22 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:13:22 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:13:22 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:13:22 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:13:22 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:13:22 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:13:22 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:13:22 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:13:22 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:13:22 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:13:22 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:13:22 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:13:22 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:13:22 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:13:22 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:13:22 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:13:22 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:13:22 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:13:22 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:13:22 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:13:22 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:13:22 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:13:22 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:13:22 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:13:25 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:13:25 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:13:25 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:13:25 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:13:25 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:13:25 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:13:25 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:13:25 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:13:25 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:13:25 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:13:25 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:13:25 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:13:25 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:13:25 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:13:25 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:13:25 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:13:25 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:13:25 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:13:25 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:13:25 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:13:25 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:13:25 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:13:25 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:13:25 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:13:25 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:13:25 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:13:25 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:13:25 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:13:25 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:13:25 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:13:25 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:13:25 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:13:25 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:13:25 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:13:25 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:13:25 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:13:25 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:13:25 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:13:25 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:13:25 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:13:25 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:17:12 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:17:12 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:17:12 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:17:12 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:17:12 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:17:12 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:17:12 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:17:12 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:17:12 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:17:12 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:17:12 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:17:12 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:17:12 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:17:12 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:17:12 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:17:12 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:17:12 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:17:12 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:17:12 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:17:12 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:17:12 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:17:12 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:17:12 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:17:12 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:17:12 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:17:12 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:22:40 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:22:40 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:22:40 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:22:40 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:22:40 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:22:40 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:22:40 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:22:40 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:22:40 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:22:40 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:22:40 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:22:40 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:22:40 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:22:41 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:22:41 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:22:41 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:22:41 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:22:41 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:22:41 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:22:41 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:22:41 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:22:41 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:22:41 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:22:41 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:22:41 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:22:41 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:22:42 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:22:42 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:22:42 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:22:42 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:22:42 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:22:42 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:22:42 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:22:42 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:22:42 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:22:42 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:22:42 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:22:42 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:22:42 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:22:42 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:22:42 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:22:42 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:22:42 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:22:42 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:22:42 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:22:42 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:22:42 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:22:42 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:22:42 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:22:42 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:22:42 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:22:42 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:22:42 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:22:42 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:22:42 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:22:42 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:22:42 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:22:42 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:22:42 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:22:42 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:22:42 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:22:42 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:22:42 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:22:42 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:22:42 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:22:43 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:22:43 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:22:43 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:22:43 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:22:43 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:22:43 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:22:43 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:22:43 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:22:43 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:22:43 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:22:43 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:22:43 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:22:43 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:22:43 - o.s.web.servlet.DispatcherServlet - GET "/api/v1/accounts/balances", parameters={}
2025-10-30 22:22:43 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.rabobank.banking.controller.AccountController#getAllAccountBalances()
2025-10-30 22:22:43 - c.r.b.controller.AccountController - GET /api/accounts/balances - Fetching all account balances
2025-10-30 22:22:43 - o.h.e.t.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-10-30 22:22:43 - o.h.e.t.internal.TransactionImpl - begin
2025-10-30 22:22:43 - c.r.banking.service.AccountService - Fetching all account balances
2025-10-30 22:22:43 - org.hibernate.orm.sql.exec - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2025-10-30 22:22:43 - org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
Hibernate: 
    /* SELECT
        a 
    FROM
        Account a 
    JOIN
        
    FETCH
        a.user 
    JOIN
        
    FETCH
        a.card 
    WHERE
        a.active = true */ select
            a1_0.account_id,
            a1_0.account_number,
            a1_0.active,
            a1_0.balance,
            c1_0.id,
            c1_0.account_id,
            c1_0.active,
            c1_0.card_holder_name,
            c1_0.card_number,
            c1_0.card_type,
            c1_0.created_at,
            c1_0.expiry_date,
            c1_0.updated_at,
            a1_0.created_at,
            a1_0.updated_at,
            a1_0.user_id,
            u1_0.id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.last_name,
            u1_0.phone_number,
            u1_0.updated_at 
        from
            accounts a1_0 
        join
            users u1_0 
                on u1_0.id=a1_0.user_id 
        join
            cards c1_0 
                on a1_0.account_id=c1_0.account_id 
        where
            a1_0.active=true
2025-10-30 22:22:43 - c.r.banking.service.AccountService - Found 3 active accounts with total balance: €52899.00
2025-10-30 22:22:43 - o.h.e.t.internal.TransactionImpl - committing
2025-10-30 22:22:43 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/yaml]
2025-10-30 22:22:43 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [AllAccountsBalanceResponseDto(accounts=[com.rabobank.banking.dto.response.AccountBalanceResponseDto@ (truncated)...]
2025-10-30 22:22:43 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 22:49:21 - o.s.web.servlet.DispatcherServlet - GET "/v3/api-docs.yaml", parameters={}
2025-10-30 22:49:21 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to org.springdoc.webmvc.api.OpenApiWebMvcResource#openapiYaml(HttpServletRequest, String, Locale)
2025-10-30 22:49:21 - o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/vnd.oai.openapi;q=0.2', given [text/html, image/gif, image/jpeg, */*;q=0.2] and supported [application/vnd.oai.openapi]
2025-10-30 22:49:21 - o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{111, 112, 101, 110, 97, 112, 105, 58, 32, 51, 46, 48, 46, 49, 10, 105, 110, 102, 111, 58, 10, 32, 3 (truncated)...]
2025-10-30 22:49:21 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 23:33:08 - o.s.web.servlet.DispatcherServlet - GET "/v3/api-docs", parameters={}
2025-10-30 23:33:08 - o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to org.springdoc.webmvc.api.OpenApiWebMvcResource#openapiJson(HttpServletRequest, String, Locale)
2025-10-30 23:33:08 - o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json;q=0.8', given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7] and supported [application/json]
2025-10-30 23:33:08 - o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{123, 34, 111, 112, 101, 110, 97, 112, 105, 34, 58, 34, 51, 46, 48, 46, 49, 34, 44, 34, 105, 110, 10 (truncated)...]
2025-10-30 23:33:08 - o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-10-30 23:33:08 - o.s.web.servlet.DispatcherServlet - GET "/favicon.ico", parameters={}
2025-10-30 23:33:08 - o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2025-10-30 23:33:08 - o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-10-30 23:33:08 - o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.rabobank.banking.controller.GlobalExceptionHandler#handleGenericException(Exception, WebRequest)
2025-10-30 23:33:08 - c.r.b.c.GlobalExceptionHandler - Unexpected error occurred
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource favicon.ico.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:138)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:165)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:88)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:113)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:83)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:72)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1774)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:973)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:491)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-10-30 23:33:08 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json;q=0.8', given [image/avif, image/webp, image/apng, image/svg+xml, image/*, */*;q=0.8] and supported [application/json, application/*+json, application/yaml]
2025-10-30 23:33:08 - o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [ErrorResponseDto(timestamp=2025-10-30T23:33:08.704073700, status=500, error=Internal Server Error, m (truncated)...]
2025-10-30 23:33:08 - o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource favicon.ico.]
2025-10-30 23:33:08 - o.s.web.servlet.DispatcherServlet - Completed 500 INTERNAL_SERVER_ERROR
